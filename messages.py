import json
from database import User, List, Task
import telebot as t


class MESSAGE:
    cant_create_list = "–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ —Å–æ–∑–¥–∞—Ç—å –≤–∞—à —Å–ø–∏—Å–æ–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏—Å–∫–∞"
    cant_get_list = "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ :("
    task_added = "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
    task_error = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    task_list = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á:"
    main_menu = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í–æ—Ç –≤—Å–µ –≤–∞—à–∏ —Å–ø–∏—Å–∫–∏" + "\n —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ üëá"
    edit_list_name = "–í–≤–µ–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞"
    how_to_add_task = "—á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–µ üëá"
    list_menu = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è"

    @classmethod
    def list_created(cls, list_name):
        return f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤—ã —Å–æ–∑–¥–∞–ª–∏ —Å–ø–∏—Å–æ–∫ *{list_name}*. \n" + MESSAGE.how_to_add_task

    @classmethod
    def list_selected(cls, list_name):
        return f"–í–æ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ *{list_name}*" + "\n" + MESSAGE.how_to_add_task

    @classmethod
    def list_name_edited(cls, list_name):
        return f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ. –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: *{list_name}*" + "\n" + MESSAGE.how_to_add_task

    @classmethod
    def delete_list(cls, list_name):
        return f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å *{list_name}* ?"

    @classmethod
    def sure_delete_list(cls, list_name):
        return f"–í—ã —É–¥–∞–ª–∏–ª–∏ {list_name} !"


class Keyboards:
    @classmethod
    def get_inline_list(cls, cur_user: User) -> t.types.InlineKeyboardMarkup:
        keyboard = t.types.InlineKeyboardMarkup()
        for list_ in sorted(cur_user.lists, key=lambda lis: lis.id):
            callback_button = t.types.InlineKeyboardButton(text=list_.name,
                                                           callback_data=list_.get_custom_json(action='select list'))
            keyboard.add(callback_button)
        return keyboard

    @classmethod
    def get_inline_tasks(cls, list_: List):
        keyboard = t.types.InlineKeyboardMarkup()
        if list_.tasks:
            for task in sorted(list_.tasks, key=lambda t: t.id):
                task: Task
                callback_button = t.types.InlineKeyboardButton(text=task.inline_text,
                                                               callback_data=task.get_json.addinfo(
                                                                   {'action': 'selected'}).tostr())
                keyboard.add(callback_button)
        callback_button = t.types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∏—Å–∫–∞',
                                                       callback_data=list_.get_json.addinfo({'action': 'edit'}).tostr())
        # callback_data=json.dumps(
        #             {"action": "edit list", "list_id": list_.id, "type": "action"})
        keyboard.add(callback_button)
        callback_button = t.types.InlineKeyboardButton(text='–í—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                                                       callback_data=json.dumps({'action': 'menu'}))
        keyboard.add(callback_button)
        return keyboard

    @classmethod
    def get_inline_edit_list(cls, list_: List):
        keyboard = t.types.InlineKeyboardMarkup()
        b1 = t.types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
                                          callback_data=list_.get_json.addinfo({'action': {'edit': 'name'}}).tostr())
        b2 = t.types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫",
                                          callback_data=list_.get_json.addinfo({'action': 'delete'}).tostr())
        keyboard.add(b1, b2)
        return keyboard

    @classmethod
    def get_main_menu(cls):
        keyboard = t.types.InlineKeyboardMarkup()
        callback_button = t.types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ø–∏—Å–∫–∏',
                                                       callback_data=json.dumps({'action': 'menu'}))
        keyboard.add(callback_button)
        return keyboard

    @classmethod
    def back(cls):
        keyboard = t.types.InlineKeyboardMarkup()
        callback_button = t.types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ø–∏—Å–∫–∏',
                                                       callback_data=json.dumps({'action': 'menu'}))
        keyboard.add(callback_button)
        return keyboard

    @classmethod
    def sure_delete(cls, obj):
        keyboard = t.types.InlineKeyboardMarkup()
        b1 = t.types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—åüóëÔ∏è',
                                          callback_data=obj.get_json.addinfo({'action': 'delete'}).tostr())
        b2 = t.types.InlineKeyboardButton(text='–ú–µ–Ω—é',
                                          callback_data=json.dumps({'action': 'menu'}))
        keyboard.row(b2, b1)
        return keyboard
